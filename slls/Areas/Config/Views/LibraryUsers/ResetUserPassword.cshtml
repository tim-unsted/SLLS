@using System.Linq
@model slls.ViewModels.LibraryUserResetPasswordViewModel

@Html.Partial("_ModalEditHeader")

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="modal-body">

        @*@Html.HiddenFor(x => x.UserId)*@

        <div class="form-horizontal">

            @if (ViewData.ModelState.Any(x => x.Value.Errors.Any()))
            {
                <div class="alert alert-danger">
                    <a href="#" class="close" data-dismiss="alert">&times;</a>
                    <h4>Oops!</h4>
                    @Html.ValidationSummary()
                </div>
            }

            @{
                if (string.IsNullOrEmpty(Model.UserId))
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.LibraryUsers, htmlAttributes: new { @class = "control-label col-md-3" })
                        <div class="col-md-8">
                            @Html.DropDownList("UserId", Model.LibraryUsers, "Select a Library User", htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.UserId, "", new { @class = "text-danger" })
                        </div>
                    </div>
                }
                else
                {
                    <div class="form-group">
                        @Html.LabelFor(model => model.Fullname, htmlAttributes: new {@class = "control-label col-md-3"})
                        <div class="col-md-8">
                            <p class="form-control-static">@Html.DisplayFor(model => model.Fullname)</p>
                        </div>
                    </div>
                    @Html.HiddenFor(x => x.UserId)
                }
}

            <div class="form-group">
                @Html.LabelFor(model => model.NewPassword, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.NewPassword, new { htmlAttributes = new { @class = "form-control" } })
                    <span class="help-inline">@Html.Raw(Model.PasswordTip)</span>
                    @Html.ValidationMessageFor(model => model.NewPassword, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-3" })
                <div class="col-md-8">
                    @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                </div>
            </div>

        </div>
    </div>
    @Html.Partial("_ModalEditFooter")
}

@Scripts.Render("~/bundles/modalAddEditHeader")