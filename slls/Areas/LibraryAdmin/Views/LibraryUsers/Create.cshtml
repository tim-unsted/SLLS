@using System.Web
@using VortexSoft.Bootstrap
@using Westwind.Globalization
@model slls.ViewModels.LibraryUserAddViewModel

<div>
    <span class="btn-group pull-right">
        <button type="button" class="btn-link" onclick="window.history.back();">Cancel</button>
    </span>
    <h2>@ViewBag.Title</h2>
</div>
<hr />

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">

        @Html.Raw(HttpUtility.HtmlDecode(Html.ValidationSummary(false, "", new { @class = "text-danger" }).ToHtmlString()))
        @Html.HiddenFor(x => x.PasswordTip)

        @using (var tabs = Html.Bootstrap().Begin(new Tabs()))
        {
            tabs.Tab("User Details", "details");
            tabs.Tab("Roles & Permissions", "roles");
            tabs.Tab("Notes", "notes");

            using (tabs.BeginPanel())
            {
                <div style="padding: 15px 0;">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Firstname, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Firstname, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Firstname, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Lastname, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Lastname, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Lastname, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label(DbRes.T("Users.Username", "FieldDisplayName"), htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.UserName, new { htmlAttributes = new { @class = "form-control" } })
                            <span class="help-inline">For in-house systems (i.e. not hosted), this should be the user's normal windows login name.</span>
                            @Html.ValidationMessageFor(model => model.UserName, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.Label(DbRes.T("Users.Barcode", "FieldDisplayName"), htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.UserBarcode, new { htmlAttributes = new { @class = "form-control" } })
                            <span class="help-inline">Barcodes might be used on, for example, a user's ID card.</span>
                            @Html.ValidationMessageFor(model => model.UserBarcode, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Email, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Email, new { htmlAttributes = new { @class = "form-control" } })
                            <span class="help-inline">A valid email address is required for interacting with the user, sending notification emails, and using the 'forgot password' feature.</span>
                            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Password, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Password, new { htmlAttributes = new { @class = "form-control" } })
                            <span class="help-inline">@Html.Raw(Model.PasswordTip)</span>
                            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.ConfirmPassword, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.ConfirmPassword, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.ConfirmPassword, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.LocationId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("LocationID", null, htmlAttributes: new { @class = "form-control selectpicker" })
                            @Html.ValidationMessageFor(model => model.LocationId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.DepartmentId, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("DepartmentID", null, htmlAttributes: new { @class = "form-control selectpicker" })
                            @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Position, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.Position, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Position, "", new { @class = "text-danger" })
                        </div>
                    </div>


                </div>
            }

            using (tabs.BeginPanel())
            {
                <div style="padding: 15px 0;">
                    <div class="form-group">
                        @Html.LabelFor(model => model.IsLive, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.IsLive)
                                <span class="help-inline">Only Live users can access the system.</span>
                                @Html.ValidationMessageFor(model => model.IsLive, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.SelfLoansAllowed, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.SelfLoansAllowed)
                                <span class="help-inline">Is the user allowed to issue and return items (loans) via their browser?</span>
                                @Html.ValidationMessageFor(model => model.SelfLoansAllowed, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.IgnoreAd, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            <div class="checkbox">
                                @Html.EditorFor(model => model.IgnoreAd)
                                <span class="help-inline">Should this user record be excluded from any Active Directory syncing/updates?></span>
                                @Html.ValidationMessageFor(model => model.IgnoreAd, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.Roles, htmlAttributes: new { @class = "control-label col-md-2" })
                        <span class=" col-md-10">
                            <ul class="list-unstyled">
                                @foreach (var item in Model.RolesList)
                                {
                                    <li>
                                        <input type="checkbox" name="selectedRoles" value="@item.Value" checked="@item.Selected" />
                                        @Html.Label(item.Value, new { @class = "control-label" })
                                    </li>
                                }
                            </ul>
                        </span>
                    </div>
                </div>
            }

            using (tabs.BeginPanel())
            {
                <div style="padding: 15px 0;">
                    <div class="form-group">
                        @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-9">
                            @Html.EditorFor(model => model.Notes, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            }
        }
    </div>
    <div class="form-footer">
        <button type="submit" id="btnSave" value="Save" class="btn btn-success"><span aria-hidden="true" class="glyphicon glyphicon-ok"></span> @DbRes.T("Buttons.Confirm_Add", "Terminology")</button>
        &nbsp;&nbsp;or&nbsp;<button type="button" class="btn-link" onclick="window.history.back();">Cancel</button>
    </div>
}

<script type="text/javascript">
    $(document).ready(function () {
        $('.selectpicker').selectpicker({
            liveSearch: true,
            showSubtext: true
        });
    });
</script>
