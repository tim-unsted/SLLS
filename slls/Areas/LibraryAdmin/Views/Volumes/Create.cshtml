@using Westwind.Globalization
@model slls.ViewModels.VolumesAddViewModel

@Html.Partial("_HeaderCancel")

<hr/>

@using (Html.BeginForm("Create", "Volumes", FormMethod.Post, new { id = "frmNew " }))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(model => model.Step)
        
        <div class="form-group">
            @Html.Label(DbRes.T("Titles.Title", "FieldDisplayName"), new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(x => x.SelectTitle, new { @placeholder = "Start typing part of the title you wish to add, then select it from the drop-down list below ...", @class = "form-control" })
                @Html.HiddenFor(model => model.TitleId)
                @Html.ValidationMessageFor(model => model.TitleId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label(DbRes.T("Copies.Copy", "FieldDisplayName"), new {@class = "control-label col-md-2"})
            <div class="col-md-2">
                @Html.DropDownListFor(model => model.CopyId, null, "Select a " + DbRes.T("Copies.Copy", "FieldDisplayName"), new {@class = "form-control", @id = "CopyID"})
                @Html.ValidationMessageFor(model => model.CopyId, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.Label(DbRes.T("CopyItems.Barcode", "FieldDisplayName"), new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.Barcode, new { htmlAttributes = new { @class = "form-control" } })
                <span class="help-inline">This is the unique barcode or indentifier for the volume. This should be the same as any barcode attached to the item.</span>
                @Html.ValidationMessageFor(model => model.Barcode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label(DbRes.T("CopyItems.Label_Text", "FieldDisplayName"), new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LabelText, new { htmlAttributes = new { @class = "form-control" } })
                <span class="help-inline">This is the information printed on a label</span>
                @Html.ValidationMessageFor(model => model.LabelText, "", new { @class = "text-danger" })
            </div>
        </div>
        
        <div class="form-group">
            @Html.Label(DbRes.T("Borrowing.Loan_Type", "FieldDisplayName"), "Loan Type", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("LoanTypeId", null, htmlAttributes: new { @class = "form-control" })
                <span class="help-inline">This controls how the item may be loaned or if it is Reference-Only</span>
                @Html.ValidationMessageFor(model => model.LoanTypeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.Label(DbRes.T("Copies.Print_Label", "FieldDisplayName"), new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.PrintLabel)
                    <span class="help-inline">Tick if you would like a label for this item to be printed.</span>
                    @Html.ValidationMessageFor(model => model.PrintLabel, "", new {@class = "text-danger"})
                </div>
            </div>
        </div>
    </div>

    <div class="form-footer">
        <button type="submit" id="btnOk" value="Add" class="btn btn-success"><span aria-hidden="true" class="glyphicon glyphicon-ok"></span> @ViewBag.BtnText</button>
        &nbsp;&nbsp;or&nbsp;<input type="button" value="Cancel" class="btn-link" onclick="window.history.back();" />
    </div>

}

@section scripts {
@Scripts.Render("~/bundles/selectPicker")
    <script src="@Url.Content("~/Scripts/jquery.mcautocomplete.js")" type="text/javascript"></script>

    <script type="text/javascript">
        $(document).ready(function() {
            $('.selectpicker').selectpicker({
                liveSearch: true,
                showSubtext: true
            });

            function selectAllText(textbox) {
                textbox.focus();
                textbox.select();
            }

            function getCopies(titleId) {
                var select = $("#CopyID");
                select.empty();

                var selectedTitleId = { TitleID: titleId };

                $.ajax({
                    url: '@Url.Action("GetTitleCopies", "Titles")',
                    type: 'Post',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: JSON.stringify(selectedTitleId),
                    success: function(data) {
                        if (data.success) {
                            $.each(data.TitleCopyData, function(index, itemData) {
                                    select.append($('<option/>', {
                                        value: itemData.Value,
                                        text: itemData.Text
                                    }));
                                }
                            );
                            $('#LoanTypeId').val(data.DefaultloanType);
                        } else {
                            alert('invalid ID' + data.success);
                        }
                    },
                    async: false
                });
            };

            var columns = [{ name: '', minWidth: '0%', valueField: 'Id' }, { name: 'Title', minWidth: '40%', valueField: 'title' }, { name: 'Edition', minWidth: '20%', valueField: 'edition' }, { name: 'Year', minWidth: '10%', valueField: 'year' }, { name: 'Author', minWidth: '20%', valueField: 'authors' }];

            $('#SelectTitle').click(function() { selectAllText(jQuery(this)) });

            $("#SelectTitle").mcautocomplete({
                //autoFocus: true,
                showHeader: true,
                columns: columns,
                source: function(request, response) {
                    var title = new Array();
                    var urlGetTerms = "@Url.Action("Autocomplete", "Titles")";
                    $.ajax({
                        async: false,
                        cache: false,
                        type: "POST",
                        url: urlGetTerms,
                        data: { "term": request.term },
                        success: function(data) {
                            for (var i = 0; i < data.length; i++) {
                                title[i] = { Id: data[i].TitleId, title: data[i].Title, edition: data[i].Edition, year: data[i].Year, authors: data[i].Authors };
                            }
                        }
                    });
                    response(title);
                },
                select: function(event, ui) {
                    event.preventDefault();
                    if (ui.item) {
                        if (ui.item.Id != null) {
                            $('#SelectTitle').val(ui.item.title);
                            $('#TitleID').val(ui.item.Id);
                            getCopies(ui.item.Id);
                        }
                    }
                }
            });
        });
    </script>
}