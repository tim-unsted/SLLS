@using System.Web.UI.WebControls
@using Westwind.Globalization
@model slls.ViewModels.LoansSelectorViewModel

@Html.Partial("_ModalAddEditHeader")

@using (Html.BeginForm("Post_ItemBorrowingHistoryReport", "Loans", FormMethod.Post, new { @class = "form-horizontal", id = "frmSelect" }))
{
    @Html.ValidationSummary()
    
    @Html.HiddenFor(m => m.DetailsText)
    @*@Html.HiddenFor(m => m.SelectCopies)
    @Html.HiddenFor(m => m.SelectTitles)
    @Html.HiddenFor(m => m.SelectVolumes)
    @Html.HiddenFor(m => m.SelectWeeks)*@

    <div class="modal-body">
        @if (Model.DetailsText != "")
        {
            <div class="alert alert-info">
                <p><span aria-hidden="true" class="glyphicon glyphicon-info-sign"></span> @Model.DetailsText</p>
            </div>
        }

        <div class="strike close-strike">
            <span>Enter or scan a @DbRes.T("CopyItems.Barcode", "FieldDisplayName")</span>
        </div>

        <div class="form-group">
            <div class="col-md-6">
                @Html.Label(DbRes.T("CopyItems.Barcode", "FieldDisplayName"))
                @Html.EditorFor(model => model.Barcode, new { htmlAttributes = new { @class = "form-control", placeholder = "Enter or scan a " + DbRes.T("CopyItems.Barcode", "FieldDisplayName") } })
                @Html.ValidationMessageFor(model => model.Barcode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="strike close-strike">
            <span>Or, select an item below</span>
        </div>

        <div class="form-group">
            <div class="col-md-12">
                @Html.Label("Borrowed " + DbRes.T("Titles", "EntityType"))
                @Html.DropDownListFor(model => model.TitleId, Model.SelectTitles, new { @class = "form-control selectpicker" })
                @Html.ValidationMessageFor(model => model.TitleId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-6">
                @Html.Label("Borrowed " + DbRes.T("Titles.Copies", "FieldDisplayName"))
                @Html.DropDownListFor(model => model.CopyId, Model.SelectCopies, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.CopyId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-6">
                @Html.Label("Borrowed " + DbRes.T("Copies.Copy_Items", "FieldDisplayName"))
                @Html.DropDownListFor(model => model.VolumeId, Model.SelectVolumes, new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.VolumeId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="strike close-strike" style="margin-top: 20px;">
            <span>Time-span (Optional):</span>
        </div>

        <div class="form-group">
            <div class="btn-group col-md-12" data-toggle="buttons" id="dateRangeType">
                <div class="col-md-6">
                    <div class="radio-inline col-md-10">
                        <label>
                            @Html.RadioButtonFor(model => model.DateRangeType, "span")Time-span
                        </label>
                        <div>
                            @Html.DropDownList("Weeks", new SelectList(Model.SelectWeeks, "Key", "Value", "0"), new { name = "weeks", @class = "form-control" })
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="radio-inline">
                        <label>
                            @Html.RadioButtonFor(model => model.DateRangeType, "range")Date range
                        </label>
                        <div>
                            @Html.Label("From", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.StartDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.StartDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <br /><br />
                        <div>
                            @Html.Label("To", htmlAttributes: new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                                @Html.ValidationMessageFor(model => model.EndDate, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="modal-footer">
        <button type="submit" class="btn btn-success"><span aria-hidden="true" class="glyphicon glyphicon-ok"></span> View Report</button>
        &nbsp;&nbsp;or&nbsp;<button type="button" class="btn-link" data-dismiss="modal">@DbRes.T("Buttons.Cancel", "Terminology")</button>
    </div>
}
@Scripts.Render("~/bundles/modalAddEditHeader")
@Scripts.Render("~/bundles/selectPicker")
    <script type="text/javascript">
        $(document).ready(function() {
            var typingTimer; //timer identifier
            var doneTypingInterval = 500; //time in ms, 0.5 seconds for example
            var input = $('#Barcode');

            input.focus();

            //on keyup, start the countdown
            input.on('keyup', function() {
                clearTimeout(typingTimer);
                typingTimer = setTimeout(doneTyping, doneTypingInterval);
            });

            //on keydown, clear the countdown
            input.on('keydown', function() {
                clearTimeout(typingTimer);
            });

            //on paste, clear the countdown
            input.on('paste', function() {
                clearTimeout(typingTimer);
                typingTimer = setTimeout(doneTyping, doneTypingInterval);
            });

            function doneTyping() {
                var selectedBarcode = { barcode: input.val() };
                $.ajax({
                    url: '@Url.Action("GetIdsFromBarcode", "Loans")',
                    type: 'Post',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: JSON.stringify(selectedBarcode),
                    success: function(data) {
                        if (data.success) {
                            $("#TitleId").val(data.TitleId).change();
                            $("#CopyId").val(data.CopyId).change();
                            $("#VolumeId").val(data.VolumeId).change();
                        }
                    }
                });
            }

            $('.selectpicker').selectpicker({
                liveSearch: true
            });

            $('#Weeks').click(function() {
                $('input:radio[id="DateRangeType"][value="span"]').prop("checked", true);
            });

            $('#StartDate').click(function() {
                $('input:radio[id="DateRangeType"][value="range"]').prop("checked", true);
            });

            $('#EndDate').click(function() {
                $('input:radio[id="DateRangeType"][value="range"]').prop("checked", true);
            });

            //Get a list of borrowed copies for the selected title ...
            $("#TitleId").change(function() {
                var selectCopies = $("#CopyId");
                var selectVolumes = $("#VolumeId");
                selectCopies.empty();
                selectVolumes.empty();
                //alert($("#TitleId").val());

                var selectedTitleId = { titleId: $("#TitleId").val() };

                $.ajax({
                    url: '@Url.Action("GetCopies", "Loans")',
                    type: 'Post',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: JSON.stringify(selectedTitleId),
                    success: function(data) {
                        if (data.success) {

                            var copiesCount = data.BorrowedCopies.length;
                            selectCopies.append($('<option/>', {
                                value: "0",
                                text: "All Copies (" + copiesCount + ")"
                            }));

                            var volumesCount = data.BorrowedVolumes.length;
                            selectVolumes.append($('<option/>', {
                                value: "0",
                                text: "All Copy Items (" + volumesCount + ")"
                            }));

                            //Load in the copies ...
                            $.each(data.BorrowedCopies, function(index, itemData) {
                                selectCopies.append($('<option/>', {
                                    value: itemData.Value,
                                    text: itemData.Text
                                }));
                            });

                            //Load in the volumes ...
                            $.each(data.BorrowedVolumes, function(index, itemData) {
                                selectVolumes.append($('<option/>', {
                                    value: itemData.Value,
                                    text: itemData.Text
                                }));
                            });
                        } else {
                            alert('invalid ID' + data.success);
                        }
                    },
                    async: false
                });
            });

            //Get a list of available volumes for a selected title/copy ...
            function DoVolumes(copyId) {
                var selectVolumes = $("#VolumeId");
                var barcodeField = $("#Barcode");
                selectVolumes.empty();

                var selectedCopyId = { copyId: copyId };

                $.ajax({
                    url: '@Url.Action("GetVolumes", "Loans")',
                    type: 'Post',
                    contentType: 'application/json',
                    dataType: 'json',
                    data: JSON.stringify(selectedCopyId),
                    success: function(data) {
                        if (data.success) {

                            var volumesCount = data.BorrowedVolumes.length;
                            selectVolumes.append($('<option/>', {
                                value: "0",
                                text: "All Copy Items (" + volumesCount + ")"
                            }));

                            $.each(data.BorrowedVolumes, function(index, itemData) {
                                selectVolumes.append($('<option/>', {
                                    value: itemData.Value,
                                    text: itemData.Text
                                }));
                            });
                        } else {
                            alert('invalid ID' + data.success);
                        }
                    },
                    async: false
                });
            }

            $("#CopyId").change(function() {
                DoVolumes($("#CopyId").val());
                $("#Barcode").val("");
            });

            $("#VolumeId").change(function() {
                var barcode = $("#VolumeId option:selected").text();
                $("#Barcode").val(barcode);
            });
        });
    </script>
