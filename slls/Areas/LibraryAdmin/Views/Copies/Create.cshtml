@using Westwind.Globalization
@model slls.ViewModels.CopiesAddViewModel

@Html.Partial("_HeaderCancel")
<hr/>
@using (Html.BeginForm("PostCreate", "Copies", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">

        @Html.HiddenFor(model => model.CopyNumber)
        @Html.HiddenFor(model => model.Step)

        @Html.ValidationSummary(true, "", new {@class = "text-danger"})
        <div class="form-group">
            @Html.Label(DbRes.T("Titles.Title", "FieldDisplayName"), new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @*@Html.DropDownList("TitleID", null, new {@class = "form-control selectpicker"})*@
                @Html.TextBoxFor(x => x.SelectTitle, new { @placeholder = "Start typing part of the title you wish to add, then select it from the drop-down list below ...", @class = "form-control" })
                @Html.HiddenFor(model => model.TitleID)
                @Html.ValidationMessageFor(model => model.TitleID, "", new {@class = "text-danger"})
            </div>
        </div>
        
        <div class="form-group">
            @Html.Label(DbRes.T("Locations.Location", "FieldDisplayName"), "Location", htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.DropDownList("LocationID", null, htmlAttributes: new {@class = "form-control selectpicker"})
                <span class="help-inline">This is the location where the item is normally found. (Optional)</span>
                @Html.ValidationMessageFor(model => model.LocationId, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-group">
            @Html.Partial("_selectStatusType")
        </div>

        <div class="form-group">
            @Html.Label("Display on " + DbRes.T("Titles.New_Titles", "FieldDisplayName") + " List?", htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                <div class="checkbox">
                    @Html.EditorFor(model => model.AcquisitionsList)
                    <span class="help-inline">Display this item on the @DbRes.T("NewTitlesList", "EntityType")</span>
                    @Html.ValidationMessageFor(model => model.AcquisitionsList, "", new {@class = "text-danger"})
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.Label(DbRes.T("Copies.Notes", "FieldDisplayName"), htmlAttributes: new {@class = "control-label col-md-2"})
            <div class="col-md-10">
                @Html.EditorFor(model => model.Notes, new {htmlAttributes = new {@class = "form-control"}})
                @Html.ValidationMessageFor(model => model.Notes, "", new {@class = "text-danger"})
            </div>
        </div>

        <div class="form-footer">
            <button type="submit" value="Add" class="btn btn-success"><span aria-hidden="true" class="glyphicon glyphicon-ok"></span> Save & Continue ></button>
            &nbsp;&nbsp;or&nbsp;<input type="button" value="Cancel" class="btn-link" onclick="window.history.back();"/>
        </div>
    </div>
}

<script src="@Url.Content("~/Scripts/jquery.mcautocomplete.js")" type="text/javascript"></script>

@section scripts {
@Scripts.Render("~/bundles/selectPicker")
    <script type="text/javascript">

        $(document).ready(function() {
            $('.selectpicker').selectpicker({
                liveSearch: true,
                showSubtext: true
            });
        });

        function selectAllText(textbox) {
            textbox.focus();
            textbox.select();
        }

        function GetCopyNumber() {
            var copyNo = $("#CopyNumber");

            var selectedTitleId = { TitleID: $("#TitleID").val() };

            $.ajax({
                url: '@Url.Action("GetNextCopyNumber", "Copies")',
                type: 'Post',
                contentType: 'application/json',
                dataType: 'json',
                data: JSON.stringify(selectedTitleId),
                success: function(data) {
                    if (data.success) {
                        copyNo.val(data.CopyNumber);
                    } else {
                        alert('invalid ID' + data.success);
                    }
                },
                async: false
            });
        };

        var columns = [{ name: '', minWidth: '0%', valueField: 'Id' }, { name: 'Title', minWidth: '40%', valueField: 'title' }, { name: 'Edition', minWidth: '20%', valueField: 'edition' }, { name: 'Year', minWidth: '10%', valueField: 'year' }, { name: 'Author', minWidth: '20%', valueField: 'authors' }];

        $('#SelectTitle').click(function() { selectAllText(jQuery(this)) });

        $("#SelectTitle").mcautocomplete({
            autoFocus: true,
            showHeader: true,
            columns: columns,
            source: function(request, response) {
                var title = new Array();
                var urlGetTerms = "@Url.Action("Autocomplete", "Titles")";
                $.ajax({
                    async: false,
                    cache: false,
                    type: "POST",
                    url: urlGetTerms,
                    data: { "term": request.term },
                    success: function(data) {
                        for (var i = 0; i < data.length; i++) {
                            title[i] = { Id: data[i].TitleId, title: data[i].Title, edition: data[i].Edition, year: data[i].Year, authors: data[i].Authors };
                        }
                    }
                });
                response(title);
            },
            select: function(event, ui) {
                event.preventDefault();
                if (ui.item) {
                    if (ui.item.Id != null) {
                        $('#SelectTitle').val(ui.item.title);
                        $('#TitleID').val(ui.item.Id);
                        GetCopyNumber();
                    }
                }
            }
        });
    </script>
}